<pre class='metadata'>
Title: Code-first serverless azure solutions
Shortname: azureserverless
Level: 1
Date: 2020-12-10
Markup Shorthands: markdown yes
Status: DREAM
URL: https://ungerfall.github.io/2020/12/10/codefirst-serverless-azure-solutions.html 

Editor: Leonid Petrov, EPAM Systems http://www.epam.com/, Leonid_Petrov1@epam.com

Abstract: Руководство участника практического курса.

</pre>

Пререквизиты {#prerequisites}
==============================
Для начала работы на вашем компьютере должны быть:
1. Установлен Visual studio 2017+. [Скачать](https://visualstudio.microsoft.com/downloads/)
2. Установлен Azure development workload в Visual studio.
3. Установлен Azure CLI и обновлен до последней версии. [Скачать](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli).
4. Azure subscription. Если у вас её нет, то [создайте бесплатный аккаунт](https://azure.microsoft.com/free/?ref=microsoft.com&utm_source=microsoft.com&utm_medium=docs&utm_campaign=visualstudio). **Важно**: можно участвовать и без подписки с помощью локальной отладки функций.
5. Альтернативно, вы можете участвовать [используя Visual Studio Code](https://docs.microsoft.com/en-us/azure/azure-functions/functions-develop-vs-code?tabs=csharp) или [Azure portal](https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function), однако демонстрация воркшопа будет в Visual studio.

Создание ресурсов Azure {#azure-resources}
==========================================
1. Откроем shell. Bash или https://shell.azure.com/ 
2. Войдём в azure

Snippet 1 {#snippet-1}
-----------------------
``` bash
az login
```
3. Создадим [ресурсную группу](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview)

Snippet 2 {#snippet-2}
-----------------------
``` bash
GROUP=workshop-serverless-rg
az group create --location westeurope \
  --name $GROUP \
  --output table
```
4. Создадим [Storage account](https://azure.microsoft.com/en-us/services/storage/)

Snippet 3 {#snippet-3}
-----------------------
``` bash
STORAGE="workshop${RANDOM}sa"
az storage account create --name $STORAGE \
  -g $GROUP \
  -l westeurope \
  --sku Standard_LRS \
  --output table
```
5. Создадим [Functions App](https://azure.microsoft.com/en-us/services/functions/)

Snippet 4 {#snippet-4}
-----------------------
``` bash
FUNCTION=workshop-fapp-$RANDOM
az functionapp create --name $FUNCTION \
  -g $GROUP \
  -s $STORAGE \
  --consumption-plan-location westeurope \
  --functions-version 3 \
  --os-type Windows \
  --runtime dotnet
```

6. Заметьте, автоматическое создание [Application Insights](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview) в output

Создание проекта Azure Functions в Visual studio {#visual-studio-development}
================================================================
1. Откроем Visual studio.
2. Создадим новый проект по шаблону Azure Functions.
3. Укажем имя, путь к проекту.
4. В меню "Create a new Azure Functions application" укажем:
  * Azure funtions v3 (.NET Core)
  * HTTP trigger
  * В качестве storage account выберем ранее создный через Browse... в выпадающем меню
  * Authorization level: Anonymous
5. Нажмем Create

Обновим автоматически сгенерированный код {#review-autogenerated-code}
=======================================================================
1. Обновим значение атрибута FunctionName c Function1 на GetEricLippertBlogArticle.
2. Удалим из тела функции Run всё, кроме логирования.
3. После изменений код будет выглядеть так:

Snippet 5 {#snippet-5}
-----------------------
``` csharp
namespace EricLippertBlogRoulette
{
    public static class Function1
    {
        [FunctionName("GetEricLippertBlogArticle")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");
        }
    }
}
```

Добавим обращение к web crawler блога {#add-webcrawler-call}
=====================================================================================================
После записи в лог добавим обращение к функции и десериализацию в массив:

Snippet 6 {#snippet-6}
-----------------------
``` csharp
using var webClient = new WebClient();
string linksJson = await webClient.DownloadStringTaskAsync(
    "https://learning-fapp-4928.azurewebsites.net/api/GetEricLippertBlogArticles?code=1gLGWOODXcmJHVs6PLQSBcSyM0dHL/JPt1NTwgUJTvLHTurY61yUbg==");
var links = JsonConvert.DeserializeObject<string[]>(linksJson);
```

Добавим код выбора случайной статьи и Redirect {#add-random}
=============================================================
1. Добавим private static поле для Random

Snippet 7 {#snippet-7}
-----------------------
``` csharp
private static Random rng = new Random();
```

2. Добавим выбор случайной статьи и возврат RedirectResult

Snippet 8 {#snippet-8}
-----------------------
``` csharp
var randomLink = links[rng.Next(links.Length)];

return new RedirectResult(randomLink);
```

3. Итоговый код после этого этапа выглядит так:

Snippet 9 {#snippet-9}
-----------------------
``` csharp
namespace EricLippertBlogRoulette
{
    public static class Function1
    {
        private static Random rng = new Random();

        [FunctionName("GetEricLippertBlogArticle")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            using var webClient = new WebClient();
            string linksJson = await webClient.DownloadStringTaskAsync(
                "https://learning-fapp-4928.azurewebsites.net/api/GetEricLippertBlogArticles?code=1gLGWOODXcmJHVs6PLQSBcSyM0dHL/JPt1NTwgUJTvLHTurY61yUbg==");
            var links = JsonConvert.DeserializeObject<string[]>(linksJson);
            var randomLink = links[rng.Next(links.Length)];

            return new RedirectResult(randomLink);
        }
    }
}
```

Publish в Azure {#publish}
===========================
1. Создадим Publish профайл, нажав на кнопку Publish в контекстном меню проекта:
  * Target: Azure
  * Specific target: Azure Functions App (Windows)
  * Functions instance: ранее созданную workshop-fapp-{number} (Consumption)
2. Выполним Publish
3. Для получения URL вернемся в bash и выполним команду:

Snippet 10 {#snippet-10}
-------------------------
``` bash
az functionapp function show -g $GROUP \
  --name $FUNCTION \
  --function-name GetEricLippertBlogArticle \
  --query "invokeUrlTemplate" -o tsv
```

4. Скопируем адрес и откроем в браузере.
5. Заметьте, первый вызов функции медленный из-за Cold start

Добавим учёт посещенных статей с ипользованием bindings {#bindings}
====================================================================
1. Подключим Nuget пакет `Microsoft.Azure.WebJobs.Extensions.Storage`
2. Добавим параметры в метод Run для Blog биндинга:

Snippet 11 {#snippet-11}
-------------------------
``` csharp
[Blob("functions-data/visited", FileAccess.Read)] TextReader inputBlob,
[Blob("functions-data/visited", FileAccess.Write)] TextWriter outputBlob,
```

3. Добавим код считывания всех посещенных статей и их учёт при выборе случайной.

Snippet 12 {#snippet-12}
-------------------------
``` csharp
var visited = new List<string>();
if (inputBlob != null)
{
    string visitedLink;
    while ((visitedLink = inputBlob.ReadLine()) != null)
    {
        visited.Add(visitedLink);
    }
}

var links = JsonConvert.DeserializeObject<string[]>(linksJson)
    .Except(visited)
    .ToArray();
```

4. Добавим вставку выбранной статьи в visited blob

Snippet 13 {#snippet-13}
-------------------------
``` csharp
visited.Add(randomLink);
foreach (var link in visited)
{
    outputBlob.WriteLine(link);
}
```

5. Итоговый код выглядит так:

Snippet 14 {#snippet-14}
-------------------------
``` csharp
namespace EricLippertBlogRoulette
{
    public static class Function1
    {
        private static Random rng = new Random();

        [FunctionName("GetEricLippertBlogArticle")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "post", Route = null)] HttpRequest req,
            [Blob("functions-data/visited", FileAccess.Read)] TextReader inputBlob,
            [Blob("functions-data/visited", FileAccess.Write)] TextWriter outputBlob,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            using var webClient = new WebClient();
            string linksJson = await webClient.DownloadStringTaskAsync(
                "https://learning-fapp-4928.azurewebsites.net/api/GetEricLippertBlogArticles?code=1gLGWOODXcmJHVs6PLQSBcSyM0dHL/JPt1NTwgUJTvLHTurY61yUbg==");
            var visited = new List<string>();
            if (inputBlob != null)
            {
                string visitedLink;
                while ((visitedLink = inputBlob.ReadLine()) != null)
                {
                    visited.Add(visitedLink);
                }
            }

            var links = JsonConvert.DeserializeObject<string[]>(linksJson)
                .Except(visited)
                .ToArray();
            var randomLink = links[rng.Next(links.Length)];

            visited.Add(randomLink);
            foreach (var link in visited)
            {
                outputBlob.WriteLine(link);
            }

            return new RedirectResult(randomLink);
        }
    }
}
```

Аутентификация {#authentication}
================================
1. В методе Run класса Function измените в атрибутe HttpTrigger параметр AuthorizationLevel 
c Anonymous на Function.
2. Выполните Publish функции
3. Вызовете функцию в браузере (snippet 10)
4. Заметьте: теперь в ответе 401 ошибка (unauthorized)
5. Выведете в консоль default ключ функции командой

Snippet 15 {#snippet-15}
-------------------------
``` bash
az functionapp function keys list -g $GROUP \
  -n $FUNCTION \
  --function-name GetEricLippertBlogArticle \
  --query "default"
```

6. Скопируйте и дополните в браузере адрес функции как параметр ?code=<скопированный ключ>
7. Наконец, финальная версия функции:

Snippet 16 {#snippet-16}
-------------------------
``` csharp
namespace EricLippertBlogRoulette
{
    public static class Function1
    {
        private static Random rng = new Random();

        [FunctionName("GetEricLippertBlogArticle")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            [Blob("functions-data/visited", FileAccess.Read)] TextReader inputBlob,
            [Blob("functions-data/visited", FileAccess.Write)] TextWriter outputBlob,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            using var webClient = new WebClient();
            string linksJson = await webClient.DownloadStringTaskAsync(
                "https://learning-fapp-4928.azurewebsites.net/api/GetEricLippertBlogArticles?code=1gLGWOODXcmJHVs6PLQSBcSyM0dHL/JPt1NTwgUJTvLHTurY61yUbg==");
            var visited = new List<string>();
            if (inputBlob != null)
            {
                string visitedLink;
                while ((visitedLink = inputBlob.ReadLine()) != null)
                {
                    visited.Add(visitedLink);
                }
            }

            var links = JsonConvert.DeserializeObject<string[]>(linksJson)
                .Except(visited)
                .ToArray();
            var randomLink = links[rng.Next(links.Length)];

            visited.Add(randomLink);
            foreach (var link in visited)
            {
                outputBlob.WriteLine(link);
            }

            return new RedirectResult(randomLink);
        }
    }
}
```

Очистка {#clean-up}
====================
1. Удалите ресурсную группу (удалятся все ресурсы внутри)

Snippet 17 {#snippet-17}
-------------------------
``` bash
az group delete -g workshop-serverless-rg --no-wait --yes
```

2. Удалите Azure CLI [по инструкции](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli#uninstall)
3. Удалите Visual Studio [по инструкции](https://docs.microsoft.com/en-us/visualstudio/install/uninstall-visual-studio?view=vs-2019)
